# -*- coding: utf-8 -*-
"""PS3boosting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rN5Nuj0pvUyYXojQ9BV-axsS-brd3FtZ
"""

import pandas as pd
from xgboost import XGBRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

train = pd.read_csv("/content/train_PS3.csv")
test = pd.read_csv("/content/test_PS3.csv")

features = [
    'month', 'year', 'surface_total', 'surface_covered', 'rooms',
    'bedrooms', 'bathrooms', 'num_parqueaderos', 'num_banos',
    'distance_to_nearest_hospital', 'distance_to_nearest_park',
    'distance_to_nearest_transport_station', 'distance_to_financial_center'
]
target = 'price'

X = train[features]
y = train[target]
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

X_train = X_train.fillna(X_train.mean())
X_val = X_val.fillna(X_val.mean())
X_test = test[features].fillna(X_train.mean())

xgb_model = XGBRegressor(
    n_estimators=500,
    learning_rate=0.05,
    max_depth=6,
    subsample=0.8,
    colsample_bytree=0.8,
)
xgb_model.fit(X_train, y_train)

y_pred_val = xgb_model.predict(X_val)
mse = mean_squared_error(y_val, y_pred_val)
print(f"Mean Squared Error en validación: {mse}")

test['price'] = xgb_model.predict(X_test)

submission = test[['property_id', 'price']]
submission.to_csv("submission_boosting.csv", index=False)
print("Archivo 'submission_boosting.csv' generado con éxito.")

"""GRIDSEARCHV

"""

import pandas as pd
from xgboost import XGBRegressor
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.metrics import mean_squared_error

features = [
    'month', 'year', 'surface_total', 'surface_covered', 'rooms',
    'bedrooms', 'bathrooms', 'num_parqueaderos', 'num_banos',
    'distance_to_nearest_hospital', 'distance_to_nearest_park',
    'distance_to_nearest_transport_station', 'distance_to_financial_center'
]
target = 'price'

X = train[features]
y = train[target]
X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

X_train = X_train.fillna(X_train.mean())
X_val = X_val.fillna(X_val.mean())
X_test = test[features].fillna(X_train.mean())

xgb_model = XGBRegressor(random_state=42)

param_grid = {
    'n_estimators': [100, 300, 500],
    'learning_rate': [0.01, 0.05, 0.1],
    'max_depth': [4, 6, 8],
    'subsample': [0.6, 0.8, 1.0],
    'colsample_bytree': [0.6, 0.8, 1.0],
}

grid_search = GridSearchCV(
    estimator=xgb_model,
    param_grid=param_grid,
    scoring='neg_mean_squared_error',
    cv=3,
    verbose=1,
    n_jobs=-1
)

grid_search.fit(X_train, y_train)

best_params = grid_search.best_params_
print("Mejores hiperparámetros encontrados:", best_params)

best_xgb_model = grid_search.best_estimator_

y_pred_val = best_xgb_model.predict(X_val)
mse = mean_squared_error(y_val, y_pred_val)
print(f"Mean Squared Error en validación con los mejores hiperparámetros: {mse}")

test['price'] = best_xgb_model.predict(X_test)

submission = test[['property_id', 'price']]
submission.to_csv("submission_gridsearch.csv", index=False)
print("Archivo 'submission_gridsearch.csv' generado con éxito.")